# Audius Protocol - CircleCI Config
# - Installs dependencies and executes unit tests for all sub directories
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
orbs:
  coveralls: coveralls/coveralls@1.0.6
  slack: circleci/slack@4.9.3

commands:
  slack-basic:
    parameters:
      event:
        description: when this notification will fire. options are fail, pass, always.
        type: string
        default: always
      branch_pattern:
        description: branch_pattern arg for slack/notify
        type: string
        default: .+
      channel:
        description: Slack channel to send message to
        type: string
        default: $SLACK_DEFAULT_CHANNEL
      text:
        description: Markdown formatted Slack message
        type: string
        default: ":rocket: Job started"
      detail:
        description: Markdown formatted Slack detail
        type: string
        default: ""
      slack_mentions_user:
        description: Used for CircleCI @mentions
        type: string
        default: ""
    steps:
      - slack/notify:
          channel: << parameters.channel >>
          branch_pattern: << parameters.branch_pattern >>
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "text": "*<< parameters.text >>:* ${CIRCLE_JOB}\n*Details:* `$CIRCLE_PROJECT_REPONAME`:`$CIRCLE_BRANCH` ($CIRCLE_USERNAME) << parameters.slack_mentions_user >> \n<< parameters.detail >> ",
                    "type": "mrkdwn"
                  },
                  "accessory": {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Job",
                      "emoji": true
                    },
                    "url": "${CIRCLE_BUILD_URL}"
                  }
                }
              ]
            }
          event: << parameters.event >>
  slack-fail:
    parameters:
      event:
        description: when this notification will fire. options are fail, pass, always.
        type: string
        default: fail
      branch_pattern:
        description: branch_pattern arg for slack/notify
        type: string
        default: .+
      channel:
        description: Slack channel to send message to
        type: string
        default: $SLACK_DEFAULT_CHANNEL
      text:
        description: Markdown formatted Slack message
        type: string
        default: ":red_circle: Job Failed"
      detail:
        description: Markdown formatted Slack detail
        type: string
        default: ""
      slack_mentions_user:
        description: Used for CircleCI @mentions
        type: string
        default: ""
    steps:
      - slack-basic:
          event: << parameters.event >>
          branch_pattern: << parameters.branch_pattern >>
          channel: << parameters.channel >>
          text: << parameters.text >>
          detail: << parameters.detail >>
          slack_mentions_user: << parameters.slack_mentions_user >>
  slack-success:
    parameters:
      event:
        description: when this notification will fire. options are fail, pass, always.
        type: string
        default: pass
      branch_pattern:
        description: branch_pattern arg for slack/notify
        type: string
        default: .+
      channel:
        description: Slack channel to send message to
        type: string
        default: $SLACK_DEFAULT_CHANNEL
      text:
        description: Markdown formatted Slack message
        type: string
        default: ":tada: Deployment Successful"
      detail:
        description: Markdown formatted Slack detail
        type: string
        default: ""
      slack_mentions_user:
        description: Used for CircleCI @mentions
        type: string
        default: ""
    steps:
      - slack-basic:
          event: << parameters.event >>
          branch_pattern: << parameters.branch_pattern >>
          channel: << parameters.channel >>
          text: << parameters.text >>
          detail: << parameters.detail >>
          slack_mentions_user: << parameters.slack_mentions_user >>

  diff-if-necessary:
    parameters:
      service:
        type: string
    steps:
      - unless:
          condition:
            or:
              - equal: [master, << pipeline.git.branch >>]
              - matches:
                  pattern: '^release.*$'
                  value: << pipeline.git.branch >>
          steps:
            - run: ./diff.sh << parameters.service >> || (echo "no diff" && circleci-agent step halt)

  bi-weekly:
    parameters:
      odd_week:
        type: boolean
        default: true
    steps:
      - run:
          name: "Bi-weekly check (Odd week: << parameters.odd_week >>)"
          command: |
            week=$(date +%-U)
            echo "This week: ${week}"
            echo "Continue on odd week? << parameters.odd_week >>"
            if [ $(($week % 2)) == 0 ]; then
                echo "Even week"
                << parameters.odd_week >> && circleci-agent step halt
            else
                echo "Odd week"
                << parameters.odd_week >> || circleci-agent step halt
            fi

  run-on-gcp:
    parameters:
      command:
        description: The command to run on the gcp instance
        type: string
      instance-name: 
        description: The name of the gcp instance
        type: string
        default: ci-job
      command-name:
        description: The name of the step to display
        default: Spin up gcp instance and run command
        type: string
      interactive-command:
        description: The command to run initially on the gcp instance that requires an interactive terminal
        type: string
        default: ""
      post-gcp-command:
        description: The command to run after exiting the gcp ssh session
        type: string
        default: ""
      fast:
        description: If A setup will be run with the --fast flag
        type: boolean
        default: true
    steps:
      - run:
          name: << parameters.command-name >>
          # This has to be one large run block because CircleCI doesn't preserve state across run steps
          command: |
            # cleanup code setup before starting actual execution
            cleanup() {
              # Delete GCP box
              gcloud compute instances delete $GCLOUD_VM_NAME --quiet

              # Delete GCP firewall
              gcloud compute firewall-rules delete $GCLOUD_VM_NAME --quiet
            }
            trap cleanup EXIT

            set -x

            # authenticate into gcloud
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account $GCLOUD_SERVICE_ACCOUNT_EMAIL --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}

            GCLOUD_VM_NAME=<< parameters.instance-name >>-$(date +%s)

            export PROTOCOL_DIR=/home/circleci/project
            git clone --branch "$CIRCLE_BRANCH" https://github.com/AudiusProject/audius-protocol.git "$PROTOCOL_DIR"
            pwd "$PROTOCOL_DIR"
            ls -la "$PROTOCOL_DIR"
            cd "$PROTOCOL_DIR/service-commands/"
            npm install --unsafe-perm

            # add IP to firewall
            CIRCLECI_IP=$(curl https://checkip.amazonaws.com)
            gcloud compute firewall-rules create $GCLOUD_VM_NAME --source-ranges "$CIRCLECI_IP" --action allow --rules all

            # run A setup on remote dev box to clone protocol and install the prerequisites for A
            # A setup ... || true is necessary because exit code returns 141 by default
            <<parameters.fast>> && A_SETUP_ARGS="--fast" || A_SETUP_ARGS=""
            yes | $PROTOCOL_DIR/service-commands/scripts/A setup remote-dev $GCLOUD_VM_NAME $A_SETUP_ARGS --spot-instance || true

            GCLOUD_IP_ADDRESS=$(gcloud compute instances describe $GCLOUD_VM_NAME --format='get(networkInterfaces[0].accessConfigs[0].natIP)')

            # Run interactive command on remotebox
            ssh -o "StrictHostKeyChecking no" -o IdentitiesOnly=yes -i ~/.ssh/google_compute_engine -t ubuntu@$GCLOUD_IP_ADDRESS \<< EOF
              << parameters.interactive-command >>
              exit;
            EOF

            # Run command on remote box
            ssh -o "StrictHostKeyChecking no" -o IdentitiesOnly=yes -i ~/.ssh/google_compute_engine -tt ubuntu@$GCLOUD_IP_ADDRESS \<< EOF
              << parameters.command >>
              exit;
            EOF

            << parameters.post-gcp-command >>


# global parameters
parameters:
  sdk_release_commit:
    type: string
    default: ""
  deploy_args:
    type: string
    default: ""
  slash_address:
    type: string
    default: ""
  cut_release:
    type: string
    default: ""
  reservations:
    type: string
    default: ""
  slack_mentions_user:
    type: string
    default: ""
  full_ci:
    type: boolean
    default: false

jobs:
  noop:
    docker:
      - image: alpine
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    steps:
      - run: echo

  release-week:
    docker:
      - image: alpine
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    steps:
      - bi-weekly:
          odd_week: true

  bake-gcp-dev-image:
    docker:
      - image: audius/circleci-gcloud-bake:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    steps:
      - run-on-gcp:
          command-name: Bake GCP Dev Image
          fast: false
          command: |
            # fail on error
            set -e;

            # on error, run this function
            exit_ssh() {
              exit $?
            }
            trap exit_ssh EXIT

            # commands to prime the VM for the bake
            A run init-repos up;
            A up;
            A down;
            cd audius-protocol/;
            git checkout -f;
          post-gcp-command: |
            BAKE_IMAGE_NAME=ci-image-bake-latest

            echo "GCLOUD_VM_NAME" $GCLOUD_VM_NAME

            # Stop GCP box, can't take an image from a running VM
            gcloud compute instances stop $GCLOUD_VM_NAME

            # Delete image with the same name (if exists)
            gcloud compute images delete $BAKE_IMAGE_NAME --quiet || true

            # Create the new CI bake image
            gcloud compute images create "$BAKE_IMAGE_NAME" \
              --project="$GOOGLE_PROJECT_ID" \
              --source-disk="$GCLOUD_VM_NAME" \
              --source-disk-zone="$GOOGLE_COMPUTE_ZONE" \
              --storage-location=us
      - slack-fail:
          branch_pattern: master
          slack_mentions_user: "@dheeraj"

  publish-sdk:
    docker:
      - image: circleci/node:14.17.5
    resource_class: xlarge
    parameters:
      sdk_release_commit:
        description: The git commit to build and release
        type: string
        default: ""
      slack_mentions_user:
        description: Used for CircleCI @mentions
        type: string
        default: ""
    steps:
      - checkout
      - setup_remote_docker
      - add_ssh_keys:
          fingerprints:
            - "d0:0b:a0:19:ac:46:58:e4:6c:ac:34:99:f6:1b:31:bb"
      - run:
          name: npm Auth
          command: echo "//registry.npmjs.org/:_authToken=$NPM_AUTH_TOKEN" > ~/.npmrc
      - slack-basic:
          event: always
          branch_pattern: master
          slack_mentions_user: << parameters.slack_mentions_user >>
      - run:
          name: Bump and Publish Libs
          command: |
            export PROTOCOL_DIR=/home/circleci/project
            libs/scripts/release.sh << parameters.sdk_release_commit >>
      - slack-fail:
          branch_pattern: master
          slack_mentions_user: << parameters.slack_mentions_user >>
      - slack-success:
          branch_pattern: master
          slack_mentions_user: << parameters.slack_mentions_user >>

  test-mad-dog-e2e:
    parameters:
      mad-dog-type:
        description: 'test, test-nightly'
        default: 'test'
        type: string
    docker:
      - image: audius/circleci-gcloud-bake:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    steps:
      - run-on-gcp:
          command-name: Test mad-dog on GCP
          instance-name: mad-dog-test
          command: |
            cd /home/ubuntu/audius-protocol;
            git pull;
            git checkout $CIRCLE_BRANCH;
            cd ./service-commands;
            npm i
            cd ../mad-dog;
            A run init-repos up;
            A up;
            npm run start << parameters.mad-dog-type >> verbose;

  test-sdk:
    docker:
      - image: audius/circleci-gcloud-bake:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    steps:
      - checkout
      - diff-if-necessary:
          service: discovery-provider
      - run-on-gcp:
          command-name: Verify generated sdk types
          instance-name: test-sdk
          interactive-command: |
            sudo apt update
            sudo apt install -y default-jre
          command: |
            cd /home/ubuntu/audius-protocol
            git pull
            git checkout $CIRCLE_BRANCH
            A up -nc 0
            cd libs
            # Check if there are any changes generated
            ./scripts/verify-types.sh

  test-libs:
    docker:
      # specify the version you desire here
      - image: circleci/node:14.17.5
      - image: trufflesuite/ganache-cli:latest
        # https://discuss.circleci.com/t/docker-using-local-image/11581/9
        # https://circleci.com/docs/2.0/configuration-reference/#docker
        command: ['-l', '8000000', '-a', '50']
      - image: trufflesuite/ganache-cli:latest
        # https://discuss.circleci.com/t/docker-using-local-image/11581/9
        # https://circleci.com/docs/2.0/configuration-reference/#docker
        command: ['-l', '8000000', '-p', '8546', '-a', '50']

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4
    steps:
      - checkout
      - diff-if-necessary:
          service: libs
      - setup_remote_docker

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "libs/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: rm -rf /home/circleci/project/libs/node_modules/websocket/.git
      - run: |
          cd libs
          npm install
      - save_cache:
          paths:
            - libs/node_modules
          key: v1-dependencies-{{ checksum "libs/package.json" }}

      - restore_cache:
          keys:
            - data-contracts-{{ checksum "contracts/package.json" }}
            - data-contracts-
      - run:
          name: contract repo init
          command: |
            cd contracts/
            npm install
      - save_cache:
          paths:
            - contracts/node_modules
          key: data-contracts-{{ checksum "contracts/package.json" }}

      - restore_cache:
          keys:
            - eth-contracts-{{ checksum "eth-contracts/package.json" }}
      - run:
          name: eth-contracts repo init
          command: |
            cd eth-contracts/
            rm -rf node_modules/web3-providers-ws/node_modules/websocket/.git/
            npm install
      - save_cache:
          paths:
            - eth-contracts/node_modules
          key: eth-contracts-{{ checksum "eth-contracts/package.json" }}

      # run tests!
      - run:
          name: run tests
          command: |
            cd libs
            npm run test-circle-ci

  test-contracts:
    docker:
      - image: circleci/node:16
      - image: trufflesuite/ganache-cli:latest
        command: ['--port=8555', '-a', '100', '-l', '8000000']
    steps:
      - checkout
      - diff-if-necessary:
          service: contracts
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "contracts/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: installation
          command: |
            cd contracts
            npm install
            cd ../
      - save_cache:
          paths:
            - contracts/node_modules
          key: v1-dependencies-{{ checksum "contracts/package.json" }}

      # run tests!
      - run:
          name: run_tests
          command: |
            cd contracts
            npm run test-circle-ci
            cd ../

  test-eth-contracts:
    # https://circleci.com/docs/2.0/parallelism-faster-jobs/
    # 1 is default; leaving this here for quick modification
    parallelism: 1
    # https://circleci.com/docs/2.0/configuration-reference/#resourceclass
    # uses medium (2vcpu/4gb) by default
    resource_class: medium
    docker:
      - image: circleci/node:14.17.5
      - image: trufflesuite/ganache-cli:latest
        command: ['--port=8546', '-a', '50', '-l', '8000000']
    steps:
      - checkout
      - diff-if-necessary:
          service: eth-contracts
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "eth-contracts/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: installation
          command: |
            cd eth-contracts
            npm install
            cd ../
      - save_cache:
          paths:
            - eth-contracts/node_modules
          key: v1-dependencies-{{ checksum "eth-contracts/package.json" }}
      - run:
          name: run_lint
          command: |
            cd eth-contracts
            npm run lint-circle-ci
            cd ../
      - run:
          name: run_tests
          command: |
            cd eth-contracts
            npm run test-circle-ci-no-coverage
            cd ../
      # this is commented out since coverage is now disabled in CI
      # - coveralls/upload:
      #     path_to_lcov: ./eth-contracts/coverage/lcov.info

  test-creator:
    docker:
      # specify the version you desire here
      - image: circleci/node:14.16
      - image: circleci/postgres:11.1
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: audius_creator_node_test
      - image: redis:5.0.4
    steps:
      - checkout
      - diff-if-necessary:
          service: creator-node
      # Download and cache dependencies
      # - restore_cache:
      #     keys:
      #     - v1-dependencies-{{ checksum "creator-node/package.json" }}
      #     # fallback to using the latest cache if no exact match is found
      #     - v1-dependencies-
      - run:
          name: setup
          command: |
            cd creator-node
            npm install
      # - save_cache:
      #     paths:
      #       - creator-node/node_modules
      #     key: v1-dependencies-{{ checksum "creator-node/package.json" }}
      - run:
          name: run creator node tests
          command: |
            export POSTGRES_TEST_PORT=5432
            cd creator-node
            export redisPort=6379
            export spOwnerWallet='yes'
            export isCIBuild=true
            npm run test:ci
      # - coveralls/upload:
      #     path_to_lcov: ./creator-node/coverage/lcov.info

  test-discovery:
    docker:
      - image: cimg/python:3.9-node
      # Discovery provider dependencies
      - image: circleci/postgres:11.1
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: audius_discovery
      - image: docker.elastic.co/elasticsearch/elasticsearch:8.1.0
        environment:
          network.host: '0.0.0.0'
          discovery.type: 'single-node'
          cluster.name: 'docker-cluster'
          node.name: 'cluster1-node1'
          xpack.security.enabled: 'false'
          ES_JAVA_OPTS: '-Xms512m -Xmx512m'
      - image: ipfs/go-ipfs:release
        # Bring up ganache
      - image: redis:3.0-alpine
      - image: trufflesuite/ganache-cli:latest
        command: ['--port=8555', '-a', '100', '-l', '8000000']
      - image: trufflesuite/ganache-cli:latest
        command: ['--port=8556', '-a', '100', '-l', '8000000']
    resource_class: medium+
    steps:
      - checkout
      - diff-if-necessary:
          service: discovery-provider
      - restore_cache:
          keys:
            - disc-prov-1-{{ checksum "discovery-provider/requirements.txt" }}
            - disc-prov-1-
      - run:
          name: python-setup
          command: |
            cd discovery-provider
            python3 -m pip install --user virtualenv
            rm -rf env/
            python3 -m venv env
            source env/bin/activate
            pip3 install -r requirements.txt
      - save_cache:
          paths:
            - discovery-provider/env/
          key: disc-prov-1-{{ checksum "discovery-provider/requirements.txt" }}
      - run:
          name: python-lint
          command: |
            export PROTOCOL_DIR=/home/circleci/project
            cd discovery-provider
            source env/bin/activate
            sh scripts/lint.sh
      - restore_cache:
          keys:
            - disc-prov-contracts-{{ checksum "contracts/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - disc-prov-contracts-
      - run:
          name: es-indexer init
          command: |
            cd discovery-provider/es-indexer
            npm install
      - run:
          name: contract repo init
          command: |
            cd contracts
            npm install
      - save_cache:
          paths:
            - contracts/node_modules
          key: disc-prov-contracts-{{ checksum "contracts/package.json" }}
      - run:
          name: eth-contract repo init
          command: |
            cd eth-contracts
            npm install
      - save_cache:
          paths:
            - eth-contracts/node_modules
          key: disc-prov-contracts-{{ checksum "contracts/package.json" }}
      - run:
          name: discovery provider tests
          command: |
            cd discovery-provider
            export audius_redis_url=redis://localhost:6379/0
            export audius_elasticsearch_url=http://localhost:9200
            export audius_delegate_owner_wallet=0x1D9c77BcfBfa66D37390BF2335f0140979a6122B
            export audius_delegate_private_key=0x3873ed01bfb13621f9301487cc61326580614a5b99f3c33cf39c6f9da3a19cad
            export audius_web3_port=8555
            export audius_web3_eth_provider_url=http://localhost:8556
            export PROMETHEUS_MULTIPROC_DIR=/home/circleci/prometheus_data
            mkdir ${PROMETHEUS_MULTIPROC_DIR}
            ./scripts/circle-ci.sh

  test-identity:
    docker:
      # specify the version you desire here
      - image: circleci/node:14.17.5
      - image: ipfs/go-ipfs:release
      - image: trufflesuite/ganache-cli:latest
        # https://discuss.circleci.com/t/docker-using-local-image/11581/9
        # https://circleci.com/docs/2.0/configuration-reference/#docker
        command: ['-l', '8000000']
      - image: circleci/postgres:11.1
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: audius_identity_service_test
      - image: redis:5.0.4
    steps:
      - checkout
      - diff-if-necessary:
          service: identity-service
      - setup_remote_docker
      # restores data-contracts
      - restore_cache:
          keys:
            - data-contracts-{{ checksum "contracts/package.json" }}
            - data-contracts-
      - run:
          name: contract repo init
          command: |
            cd contracts/
            npm install
      # Download and cache dependencies
      - restore_cache:
          keys:
            - identity-service-dep1-{{ checksum "identity-service/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - identity-service-dep1-
      - run:
          name: setup identity
          command: |
            cd identity-service/
            rm -rf ./node_modules/websocket/.git
            npm install --verbose
      - save_cache:
          paths:
            - identity-service/node_modules
          key: identity-service-dep1-{{ checksum "identity-service/package.json" }}
      - run:
          name: run identity service tests
          command: |
            cd identity-service/
            export POSTGRES_TEST_PORT=5432
            export redisPort=6379
            export isCIBuild=true
            npm run test

  test-solana-programs:
    docker:
      # specify the version you desire here
      - image: cimg/rust:1.57.0-node
    steps:
      - checkout
      - diff-if-necessary:
          service: solana-programs

      - run:
          name: Setup solana
          command: |
            sh -c "$(curl -sSfL https://release.solana.com/v1.9.14/install)"
            export PATH="/home/circleci/.local/share/solana/install/active_release/bin:$PATH"

      - restore_cache:
          keys:
            - audius-eth-registry-deps-2-{{ checksum "solana-programs/audius_eth_registry/Cargo.toml" }}
            - audius-eth-registry-deps-2-
      - run:
          name: run audius eth registry tests
          command: |
            export PATH="/home/circleci/.local/share/solana/install/active_release/bin:$PATH"
            cd solana-programs/audius_eth_registry
            cargo build-bpf
            cargo test-bpf
      - save_cache:
          paths:
            - solana-programs/audius_eth_registry/target
          key: audius-eth-registry-deps-2-{{ checksum "solana-programs/audius_eth_registry/Cargo.toml" }}

      - restore_cache:
          keys:
            - claimable-token-deps-{{ checksum "solana-programs/claimable-tokens/program/Cargo.toml" }}
            - claimable-token-deps-
      - run:
          name: run claimable token tests
          command: |
            export PATH="/home/circleci/.local/share/solana/install/active_release/bin:$PATH"
            cd solana-programs/claimable-tokens/program
            cargo build-bpf
            cargo test-bpf
      - save_cache:
          paths:
            - solana-programs/claimable-tokens/program/target
          key: claimable-token-deps-{{ checksum "solana-programs/claimable-tokens/program/Cargo.toml" }}
      # - restore_cache:
      #     keys:
      #       - reward-manager-deps-{{ checksum "solana-programs/reward-manager/program/Cargo.toml" }}
      #       - reward-manager-deps-
      # - run:
      #     name: run reward manager tests
      #     command: |
      #       export PATH=$PWD/solana-release/bin:$PATH
      #       cd solana-programs/reward-manager/program
      #       cp ../../claimable-tokens/program/target/deploy/claimable_tokens.so .
      #       cargo build-bpf
      #       cargo test-bpf
      # - save_cache:
      #     paths:
      #       - solana-programs/reward-manager/program/target
      #     key: reward-manager-deps-{{ checksum "solana-programs/reward-manager/program/Cargo.toml" }}
      # - restore_cache:
      #     keys:
      #       - track-listen-count-deps-{{ checksum "solana-programs/track_listen_count/Cargo.toml" }}
      #       - track-listen-count-deps-
      # - run:
      #     name: run track listen count tests
      #     command: |
      #       export PATH=$PWD/solana-release/bin:$PATH
      #       cd solana-programs/track_listen_count
      #       cargo build-bpf
      #       cargo test-bpf
      # - save_cache:
      #     paths:
      #       - solana-programs/track_listen_count/target
      #     key: track-listen-count-deps-{{ checksum "solana-programs/track_listen_count/Cargo.toml" }}

  test-solana-programs-anchor:
    resource_class: large # 4vcpu/8gb
    machine:
      image: ubuntu-2004:202107-02 # Ubuntu 20.04, Docker v20.10.7, Docker Compose v1.29.2 - see https://circleci.com/docs/2.0/configuration-reference/#machine
      docker_layer_caching: true
    steps:
      # TODO implement cache for faster build
      - checkout
      - diff-if-necessary:
          service: solana-programs
      - run:
          name: Install node
          command: |
            export PROTOCOL_DIR="/home/circleci/project"
            export NVM_VERSION="v0.35.3"
            export NODE_VERSION="v14.18.1"
            sudo apt update -y
            sudo DEBIAN_FRONTEND=noninteractive apt upgrade -y
            sudo apt install curl -y
            curl -o- "https://raw.githubusercontent.com/nvm-sh/nvm/$NVM_VERSION/install.sh" | bash
            source ~/.bashrc
            nvm install "$NODE_VERSION"
      - restore_cache:
          keys:
            - anchor-node-deps-{{ checksum "solana-programs/anchor/audius-data/yarn.lock" }}
            - anchor-node-deps-
      - run:
          name: Setup dev dependencies
          command: |
            export NODE_VERSION="v14.18.1"
            source ~/.profile
            source ~/.bashrc
            nvm use "$NODE_VERSION"
            export CARGO_HOME="cargo"
            export PROTOCOL_DIR="/home/circleci/project"
            cd "$PROTOCOL_DIR/solana-programs/anchor/audius-data"
            source /opt/circleci/.nvm/nvm.sh
            npm run install-dev
      - run:
          name: anchor tests
          command: |
            export PROTOCOL_DIR="/home/circleci/project"
            export PATH="/home/circleci/.local/share/solana/install/active_release/bin:/usr/local/lbin:$PATH"
            cd "$PROTOCOL_DIR/solana-programs/anchor/audius-data"
            npm test
      - save_cache:
          paths:
            - solana-programs/anchor/audius-data/node_modules
          key: anchor-node-deps-{{ checksum "solana-programs/anchor/audius-data/yarn.lock" }}
      - run:
          name: anchor program seed CLI tests
          command: |
            export NODE_VERSION="v14.18.1"
            source ~/.profile
            source ~/.bashrc
            nvm use "$NODE_VERSION"
            export PROTOCOL_DIR="/home/circleci/project"
            cd "$PROTOCOL_DIR/solana-programs/anchor/audius-data"
            solana-keygen new --no-bip39-passphrase --force -o "/home/circleci/.config/solana/id.json"
            yarn
            source /opt/circleci/.nvm/nvm.sh
            npm run localnet-up-ci
            npm run dev-setup

  docker-build-and-push:
    docker:
      - image: circleci/buildpack-deps:stretch
    parameters:
      repo:
        type: string
      logspout-tag:
        type: string
        default: ''
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Get tag or latest
          command: |
            # order of precendence for IMAGE tag is:
            # 1. $(head -n1 logging/logspout/Dockerfile) if << parameters.logspout-tag >> defined,
            # 2. CIRCLE_TAG if defined,
            # 3. Branch name if 'hotfix' in branch name (branch name passed in via $CIRCLE_BRANCH)
            # 4. 'latest', which is the default
            echo "export IMAGE_TAG=`[ << parameters.logspout-tag >> ] && echo $(head -n1 logspout/Dockerfile | cut -f 2 -d '=') || [ $CIRCLE_TAG ] && echo $(echo $CIRCLE_TAG | cut -d@ -f3) || [[ "$CIRCLE_BRANCH" =~ (hotfix) ]] && echo $CIRCLE_BRANCH || echo "latest" `" | tee -a $BASH_ENV
      - run:
          name: Docker login
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Docker build << parameters.repo >>
          command: |
            cd << parameters.repo >>
            audius_loggly_token_b64=$(echo ${audius_loggly_token} | base64)
            docker build -t audius/<< parameters.repo >>:$IMAGE_TAG -t audius/<< parameters.repo>>:$(git rev-parse HEAD) --build-arg git_sha=$(git rev-parse HEAD) --build-arg audius_loggly_disable=$audius_loggly_disable --build-arg audius_loggly_token=$audius_loggly_token --build-arg audius_loggly_tags=$audius_loggly_tags --build-arg BUILD_NUM=$CIRCLE_BUILD_NUM --build-arg audius_loggly_token=$audius_loggly_token_b64 .
            docker image prune --filter label=prune=true --filter label=build=$CIRCLE_BUILD_NUM --force
      - run:
          name: Docker push << parameters.repo >>
          command: |
            docker push audius/<< parameters.repo >>:$IMAGE_TAG
            docker push audius/<< parameters.repo >>:$(git rev-parse HEAD)

  docker-build-and-push-updated:
    docker:
      - image: cimg/base:2022.03
    parameters:
      repo:
        type: string
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: 20.10.11
      - run:
          name: Get tag or latest
          command: |
            # order of precendence for IMAGE tag is:
            # 1. CIRCLE_TAG if defined,
            # 2. Branch name if 'hotfix' in branch name (branch name passed in via $CIRCLE_BRANCH)
            # 3. 'latest', which is the default
            echo "export IMAGE_TAG=`[ $CIRCLE_TAG ] && echo $(echo $CIRCLE_TAG | cut -d@ -f3) || [[ "$CIRCLE_BRANCH" =~ (hotfix) ]] && echo $CIRCLE_BRANCH || echo "latest" `" | tee -a $BASH_ENV
      - run:
          name: Docker login
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Docker build << parameters.repo >>
          command: |
            cd << parameters.repo >>
            docker build -t audius/<< parameters.repo >>:$IMAGE_TAG -t audius/<< parameters.repo>>:$(git rev-parse HEAD) --build-arg git_sha=$(git rev-parse HEAD) --build-arg audius_loggly_disable=$audius_loggly_disable --build-arg audius_loggly_token=$audius_loggly_token --build-arg audius_loggly_tags=$audius_loggly_tags .
      - run:
          name: Docker push << parameters.repo >>
          command: |
            docker push audius/<< parameters.repo >>:$IMAGE_TAG
            docker push audius/<< parameters.repo >>:$(git rev-parse HEAD)

  deploy:
    # use a machine since you can't use OpenVPN from within a container
    machine:
      image: ubuntu-2004:202201-02
    parameters:
      git_tag:
        description: Git_tag to deploy. Latest commit on `master` otherwise.
        type: string
        default: ""
      environment:
        description: Target environment
        type: enum
        enum: [staging, prod]
        default: "staging"
      service:
        description: Target service
        type: enum
        enum: [all, discovery, creator, identity]
        default: "all"
      host:
        description: "Optional options: stage-creator-X|stage-discovery-X|stage-identity|stage-user-metadata"
        type: string
        default: ""
      params:
        description: Additional parameters for deploy-ci.py
        type: string
        default: ""
      deploy_args:
        description: When present, the only parameters used for deploy-ci.py
        type: string
        default: ""
      reservations:
        description: Show current reservation status
        type: boolean
        default: false
      reservation_notification:
        description: Send Slack notification with reservation text
        type: boolean
        default: false
    steps:
      # only send Starting slack message when prod, --force, or custom args are used
      - when:
          condition:
            and:
              - equal: [ master, "${CIRCLE_BRANCH}" ]
              - equal: [ staging, << parameters.environment >> ]
              - not:
                  equal: [ all, << parameters.service >> ]
          steps:
            - diff-if-necessary:
                service: << parameters.service >>
      - when:
          condition:
            or:
              - equal: [ prod, << parameters.environment >> ]
              - << parameters.params >>
              - << parameters.deploy_args >>
          steps:
            - slack-basic
      - add_ssh_keys:
          fingerprints:
            # ~/.ssh/audius_infrastructure
            - "df:1a:e3:9b:57:58:24:34:fb:aa:c1:b2:0b:ec:c8:42"
            # ~/.ssh/google_compute_engine
            - "d1:28:d4:5e:ca:d9:bb:70:06:da:e0:f0:00:7c:d4:a3"
            # github.com
            - "d0:0b:a0:19:ac:46:58:e4:6c:ac:34:99:f6:1b:31:bb"
      - run:
          name: Install OpenVPN
          command: |
            sudo apt-get update
            sudo apt-get install openvpn openvpn-systemd-resolved
      - run:
          name: Check IP before VPN connection
          command: |
            ip a
            echo "Public IP before VPN connection is $(curl checkip.amazonaws.com)"
      - run:
          name: VPN Setup
          background: true
          command: |
            echo $VPN_CLIENT_CONFIG | base64 --decode > /tmp/config.ovpn

            if grep -q auth-user-pass /tmp/config.ovpn; then
              if [ -z "${VPN_USER:-}" ] || [ -z "${VPN_PASSWORD:-}" ]; then
                echo "Your VPN client is configured with a user-locked profile. Make sure to set the VPN_USER and VPN_PASSWORD environment variables"
                exit 1
              else
                echo -e "${VPN_USER}\\n${VPN_PASSWORD}" > /tmp/vpn.login
              fi
            fi

            vpn_command=(sudo openvpn
              --config /tmp/config.ovpn
              --route 169.254.0.0 255.255.0.0 net_gateway
              --script-security 2
              --up /etc/openvpn/update-systemd-resolved --up-restart
              --down /etc/openvpn/update-systemd-resolved --down-pre
              --dhcp-option DOMAIN-ROUTE .)

            if grep -q auth-user-pass /tmp/config.ovpn; then
              vpn_command+=(--auth-user-pass /tmp/vpn.login)
            fi

            ET_phone_home=$(ss -Hnto state established '( sport = :ssh )' | head -n1 | awk '{ split($4, a, ":"); print a[1] }')
            echo $ET_phone_home

            if [ -n "$ET_phone_home" ]; then
              vpn_command+=(--route $ET_phone_home 255.255.255.255 net_gateway)
            fi

            for IP in $(host runner.circleci.com | awk '{ print $4; }')
              do
                vpn_command+=(--route $IP 255.255.255.255 net_gateway)
                echo $IP
            done

            for SYS_RES_DNS in $(systemd-resolve --status | grep 'DNS Servers'|awk '{print $3}')
              do
                vpn_command+=(--route $SYS_RES_DNS 255.255.255.255 net_gateway)
                echo $SYS_RES_DNS
            done

            "${vpn_command[@]}" > /tmp/openvpn.log
      - run:
          name: Wait for the connection to be established and check IP
          command: |
            counter=1
            until [ -f /tmp/openvpn.log ] && [ "$(grep -c "Initialization Sequence Completed" /tmp/openvpn.log)" != 0 ] || [ "$counter" -ge 15 ]; do
              ((counter++))
              echo "Attempting to connect to VPN server..."
              sleep 1;
            done

            if [ ! -f /tmp/openvpn.log ] || (! grep -iq "Initialization Sequence Completed" /tmp/openvpn.log); then
              printf "\nUnable to establish connection within the allocated time ---> Giving up.\n"
              exit 1
            else
              printf "\nVPN connected\n"
              printf "\nPublic IP is now %s\n" "$(curl -s http://checkip.amazonaws.com)"
            fi
      - run:
          name: Clone Repositories and Install Dependencies
          command: |
            git clone git@github.com:AudiusProject/audius-protocol.git ~/audius-protocol
            cd ~/audius-protocol
            python3 -m pip install -r .circleci/triggers/requirements.txt
      - run:
          name: Setup SSH Config
          command: |
            git clone git@github.com:AudiusProject/audius-ssh.git ~/audius-ssh
            # `AddKeysToAgent yes` is os-x only
            sed -e '7d' ~/audius-ssh/ssh_config >> ~/.ssh/config
      - when:
          condition:
            and:
              - << parameters.host >>
              - not: << parameters.deploy_args >>
              - not: << parameters.reservations >>
          steps:
            - run:
                name: Perform Deployment (<< parameters.host >>)
                command: |
                  cd ~/audius-protocol
                  set -x
                  .circleci/bin/deploy-ci.py \
                    --github-user ${GH_USER} \
                    --github-token ${GH_TOKEN} \
                    --git-tag "<< parameters.git_tag >>" \
                    --environment "<< parameters.environment >>" \
                    --services "<< parameters.service >>" \
                    --hosts "<< parameters.host >>" \
                    << parameters.params >>
      - when:
          condition:
            and:
              - not: << parameters.host >>
              - not: << parameters.deploy_args >>
              - not: << parameters.reservations >>
          steps:
            - run:
                name: Perform Deployment
                command: |
                  cd ~/audius-protocol
                  set -x
                  .circleci/bin/deploy-ci.py \
                    --github-user ${GH_USER} \
                    --github-token ${GH_TOKEN} \
                    --git-tag "<< parameters.git_tag >>" \
                    --environment "<< parameters.environment >>" \
                    --services "<< parameters.service >>" \
                    << parameters.params >>
      - when:
          condition:
            and:
              - << parameters.deploy_args >>
              - not: << parameters.reservations >>
          steps:
            - run:
                name: "Perform Deployment (deploy_args: << parameters.deploy_args >>)"
                command: |
                  cd ~/audius-protocol
                  set -x
                  .circleci/bin/deploy-ci.py \
                    --github-user ${GH_USER} \
                    --github-token ${GH_TOKEN} \
                    << parameters.deploy_args >>
      - when:
          condition: << parameters.reservations >>
          steps:
            - run:
                name: "Reservation List"
                command: |
                  cd ~/audius-protocol
                  set -x
                  .circleci/bin/deploy-ci.py \
                    --github-user ${GH_USER} \
                    --github-token ${GH_TOKEN} \
                    --dry-run \
                    --list-reservations
      - run:
          name: Set Slack Detail from /tmp/summary.md
          command: |
            export SLACK_DETAIL=$(awk '{printf "%s\\n", $0}' /tmp/summary.md)
            echo "export SLACK_DETAIL='${SLACK_DETAIL}'" >> "$BASH_ENV"
          when: always
      - slack-fail:
          detail: ${SLACK_DETAIL}
      # only send Success slack message when prod, --force, or custom args are used
      - when:
          condition:
            or:
              - equal: [ prod, << parameters.environment >> ]
              - << parameters.params >>
              - << parameters.deploy_args >>
          steps:
            - slack-success:
                detail: ${SLACK_DETAIL}
      - when:
          condition:
            and:
              - << parameters.reservations >>
              - << parameters.reservation_notification >>
          steps:
            - slack-success:
                text: Current Staging Reservations
                detail: ${SLACK_DETAIL}
      - store_artifacts:
          path: /tmp/summary.md
          destination: summary.md
      - store_artifacts:
          path: /tmp/summary.json
          destination: summary.json
      - run:
          name: Disconnect from OpenVPN
          command: |
            sudo killall openvpn || true
          when: always

  release-scripts:
    docker:
      - image: cimg/go:1.17
    parameters:
      target:
        description: Name of the script, without .sh, like bump-hotfix or cut-release
        type: enum
        enum: [cut-release, bump-hotfix, release-to-service-providers, evaluate-proposal, slash-proposal]
    steps:
      - add_ssh_keys:
          fingerprints:
            # github.com
            - "d0:0b:a0:19:ac:46:58:e4:6c:ac:34:99:f6:1b:31:bb"
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run: |
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts
          git clone git@github.com:AudiusProject/audius-tooling.git --branch jc-inf-246
          cd audius-tooling
          mkdir -p ssh_keys
          cp ~/.ssh/id_rsa_d00ba019ac4658e46cac3499f61b31bb ssh_keys/
          release-scripts/<< parameters.target >>.sh
      - slack-fail
      - when:
          condition:
            equal: [ cut-release, << parameters.target >> ]
          steps:
            - slack-success:
                text: ":git-fork: Release branch has been cut"
      - when:
          condition:
            equal: [ evaluate-proposal, << parameters.target >> ]
          steps:
            - slack-success:
                text: ":done: Governance Proposal has been evaluated"
      - when:
          condition:
            equal: [ release-to-service-providers, << parameters.target >> ]
          steps:
            - slack-success:
                text: ":gift: Deployment Released to Service Providers"
                detail: ":vote: New Governance Proposals are out @ https://dashboard.audius.org/#/governance"
                slack_mentions_user: "${SLACK_RELEASE_MENTIONS}"
            - run: |
                curl -d '{
                  "content": "New service version is out now!\n\nCompose files have been updated here:\nhttps://github.com/AudiusProject/audius-docker-compose\n\nChangelogs:\nhttps://github.com/AudiusProject/audius-protocol/releases\n\nGovernance proposals (2 days of voting left):\nhttps://dashboard.audius.org/#/governance",
                  "embeds": null,
                  "attachments": []
                }' \
                -H "Content-Type: application/json" \
                -X POST \
                "${DISCORD_WEBHOOK}"

  generate-release-checklist:
    docker:
      - image: circleci/node:14.17.5
    resource_class: large
    steps:
      - checkout
      - run:
          name: Generate Release Checklist
          command: |
            RELEASE_VERSION=$(jq -r .version discovery-provider/.version.json)
            OLD_VERSION=$(echo ${RELEASE_VERSION} | awk -F. '{$NF = $NF - 1;} 1' | sed 's/ /./g')
            START_COMMIT=$(git show-ref --hash refs/tags/@audius/discovery-provider@${OLD_VERSION})
            RELEASE_HASH=$(git show-ref --hash refs/tags/@audius/discovery-provider@${RELEASE_VERSION})
            git log \
              --pretty=format:'- [ ] [%h] - %s %an %n' \
              --abbrev-commit ${START_COMMIT}..${RELEASE_HASH} \
              > /tmp/release-checklist.md
      - store_artifacts:
          path: /tmp/release-checklist.md
          destination: release-checklist.md

workflows:
  workflows:
    when:
      and:
         - not: << pipeline.parameters.full_ci >>
         - not: << pipeline.parameters.sdk_release_commit >>
         - not: << pipeline.parameters.deploy_args >>
         - not: << pipeline.parameters.reservations >>
         - not: << pipeline.parameters.slash_address >>
         - not: << pipeline.parameters.cut_release >>
    jobs:
      - noop:
          name: tests
      - noop:
          name: creator
      - noop:
          name: discovery
      - noop:
          name: identity

      - noop:
          name: creator-deploy-hold
          type: approval
          filters:
            branches:
              ignore: /(^master|release-.*$)/
          requires:
            - build-creator
            - test-creator
      - noop:
          name: discovery-deploy-hold
          type: approval
          filters:
            branches:
              ignore: /(^master|release-.*$)/
          requires:
            - build-discovery
            - test-discovery
      - noop:
          name: identity-deploy-hold
          type: approval
          filters:
            branches:
              ignore: /(^master|release-.*$)/
          requires:
            - build-identity
            - test-identity

      - noop:
          name: built
          filters:
            branches:
              only: /(^release-.*$)/
          requires:
            - build-creator
            - test-creator
            - build-discovery
            - test-discovery
            - build-identity
            - test-identity
            - build-libs
            - test-libs
            - test-contracts
            - test-solana-programs
            - test-solana-programs-anchor
            - test-eth-contracts
            - test-mad-dog-e2e
            - test-sdk

      # Auto-deploy `master` to staging
      - deploy:
          name: autodeploy-stage-discovery
          service: discovery
          context:
            - slack-secrets
            - gh-tokens
            - open-vpn
          filters:
            branches:
              only: /(^master$)/
          requires:
            - build-discovery
            - test-discovery
      - deploy:
          name: autodeploy-stage-creator
          service: creator
          context:
            - slack-secrets
            - gh-tokens
            - open-vpn
          filters:
            branches:
              only: /(^master$)/
          requires:
            - build-creator
            - test-creator
      - deploy:
          name: autodeploy-stage-identity
          service: identity
          context:
            - slack-secrets
            - gh-tokens
            - open-vpn
          filters:
            branches:
              only: /(^master$)/
          requires:
            - build-identity
            - test-identity
      # Force deploy `master` to staging (by service)
      - noop:
          name: unreserve-stage-<< matrix.service >>
          type: approval
          filters:
            branches:
              only: /(^master$)/
          matrix:
            parameters:
              service: [discovery, creator, identity]
          requires:
            - autodeploy-stage-<< matrix.service >>
      - deploy:
          name: unreserving-stage-<< matrix.service >>
          params: --force
          context:
            - slack-secrets
            - gh-tokens
            - open-vpn
          matrix:
            parameters:
              service: [discovery, creator, identity]
          requires:
            - unreserve-stage-<< matrix.service >>
      # Force deploy `master` to staging (by host) - discovery
      - noop:
          name: unreserve-<< matrix.host >>
          type: approval
          filters:
            branches:
              only: /(^master$)/
          matrix:
            parameters:
              host: [stage-discovery-1, stage-discovery-2, stage-discovery-3, stage-discovery-4, stage-discovery-5]
          requires:
            - autodeploy-stage-discovery
      - deploy:
          name: unreserving-<< matrix.host >>
          params: --force
          context:
            - slack-secrets
            - gh-tokens
            - open-vpn
          matrix:
            parameters:
              host: [stage-discovery-1, stage-discovery-2, stage-discovery-3, stage-discovery-4, stage-discovery-5]
          requires:
            - unreserve-<< matrix.host >>
      # Force deploy `master` to staging (by host) - creator
      - noop:
          name: unreserve-<< matrix.host >>
          type: approval
          filters:
            branches:
              only: /(^master$)/
          matrix:
            parameters:
              host: [stage-creator-4, stage-creator-5, stage-creator-6, stage-creator-7, stage-creator-8, stage-creator-9, stage-creator-10, stage-creator-11, stage-user-metadata]
          requires:
            - autodeploy-stage-creator
      - deploy:
          name: unreserving-<< matrix.host >>
          params: --force
          context:
            - slack-secrets
            - gh-tokens
            - open-vpn
          matrix:
            parameters:
              host: [stage-creator-4, stage-creator-5, stage-creator-6, stage-creator-7, stage-creator-8, stage-creator-9, stage-creator-10, stage-creator-11, stage-user-metadata]
          requires:
            - unreserve-<< matrix.host >>

      # Deploy branch to staging (by service)
      - noop:
          name: reserve-stage-<< matrix.service >>
          type: approval
          filters:
            branches:
              ignore: /(^master|release-.*$)/
          matrix:
            parameters:
              service: [discovery, creator, identity]
          requires:
            - << matrix.service >>-deploy-hold
      - deploy:
          name: reserving-stage-<< matrix.service >>
          git_tag: ${CIRCLE_SHA1}
          params: --force
          context:
            - slack-secrets
            - gh-tokens
            - open-vpn
          matrix:
            parameters:
              service: [discovery, creator, identity]
          requires:
            - reserve-stage-<< matrix.service >>
      # Deploy branch to staging (by host) - discovery
      - noop:
          name: reserve-<< matrix.host >>
          type: approval
          filters:
            branches:
              ignore: /(^master|release-.*$)/
          matrix:
            parameters:
              host: [stage-discovery-1, stage-discovery-2, stage-discovery-3, stage-discovery-4, stage-discovery-5]
          requires:
            - discovery-deploy-hold
      - deploy:
          name: reserving-<< matrix.host >>
          git_tag: ${CIRCLE_SHA1}
          params: --force
          context:
            - slack-secrets
            - gh-tokens
            - open-vpn
          filters:
            branches:
              ignore: /(^master$)/
          matrix:
            parameters:
              host: [stage-discovery-1, stage-discovery-2, stage-discovery-3, stage-discovery-4, stage-discovery-5]
          requires:
            - reserve-<< matrix.host >>
      # Deploy branch to staging (by host) - creator
      - noop:
          name: reserve-<< matrix.host >>
          type: approval
          filters:
            branches:
              ignore: /(^master|release-.*$)/
          matrix:
            parameters:
              host: [stage-creator-4, stage-creator-5, stage-creator-6, stage-creator-7, stage-creator-8, stage-creator-9, stage-creator-10, stage-creator-11, stage-user-metadata]
          requires:
            - creator-deploy-hold
      - deploy:
          name: reserving-<< matrix.host >>
          git_tag: ${CIRCLE_SHA1}
          params: --force
          context:
            - slack-secrets
            - gh-tokens
            - open-vpn
          filters:
            branches:
              ignore: /(^master$)/
          matrix:
            parameters:
              host: [stage-creator-4, stage-creator-5, stage-creator-6, stage-creator-7, stage-creator-8, stage-creator-9, stage-creator-10, stage-creator-11, stage-user-metadata]
          requires:
            - reserve-<< matrix.host >>

      # Bump Tags (for release branch hot-fixes)
      - release-scripts:
          name: bump-hotfix
          target: bump-hotfix
          context:
            - slack-secrets
            - gh-tokens.releases
          filters:
            branches:
              only: /(^release-v\d*.\d*.\d*$)/
          requires:
            - built
      # Deploy Discovery Nodes to prod (for release branches)
      - noop:
          name: release-discovery-foundation
          type: approval
          filters:
            branches:
              only: /(^release-v\d*.\d*.\d*$)/
          requires:
            - bump-hotfix
      - deploy:
          name: releasing-discovery-foundation
          git_tag: ${CIRCLE_SHA1}
          environment: prod
          service: discovery
          context:
            - slack-secrets
            - gh-tokens
            - open-vpn
            - restricted-ci-jobs
          requires:
            - release-discovery-foundation
      # Deploy Identity to prod (for release branches)
      - noop:
          name: release-identity-foundation
          type: approval
          filters:
            branches:
              only: /(^release-v\d*.\d*.\d*$)/
          requires:
            - bump-hotfix
      - deploy:
          name: releasing-identity-foundation
          git_tag: ${CIRCLE_SHA1}
          environment: prod
          service: identity
          context:
            - slack-secrets
            - gh-tokens
            - open-vpn
            - restricted-ci-jobs
          requires:
            - release-identity-foundation
      # Deploy Creator Nodes to prod (for release branches)
      - noop:
          name: release-<< matrix.host >>
          type: approval
          filters:
            branches:
              only: /(^release-v.*-patch-.*$)/
          matrix:
            parameters:
              host: [prod-creator-1, prod-creator-2, prod-creator-3, prod-creator-4, prod-creator-5, prod-user-metadata]
          requires:
            - built
      - deploy:
          name: releasing-<< matrix.host >>
          git_tag: ${CIRCLE_SHA1}
          environment: prod
          service: creator
          context:
            - slack-secrets
            - gh-tokens
            - open-vpn
            - restricted-ci-jobs
          matrix:
            parameters:
              host: [prod-creator-1, prod-creator-2, prod-creator-3, prod-creator-4, prod-creator-5, prod-user-metadata]
          requires:
            - release-<< matrix.host >>

      - test-libs:
          name: test-libs
          requires:
            - tests
      - docker-build-and-push:
          name: build-libs
          repo: libs

      - test-contracts:
          name: test-contracts
          requires:
            - tests

      - test-eth-contracts:
          name: test-eth-contracts
          requires:
            - tests

      - test-creator:
          name: test-creator
          requires:
            - creator
      - docker-build-and-push:
          name: build-creator
          repo: creator-node
          requires:
            - creator

      - test-discovery:
          name: test-discovery
          requires:
            - discovery
      - docker-build-and-push-updated:
          name: build-discovery
          repo: discovery-provider
          requires:
            - discovery

      - test-identity:
          name: test-identity
          requires:
            - identity
      - docker-build-and-push:
          name: build-identity
          repo: identity-service
          requires:
            - identity

      - test-solana-programs:
          name: test-solana-programs
          requires:
            - tests
      - test-solana-programs-anchor:
          name: test-solana-programs-anchor
          requires:
            - tests

      - test-mad-dog-e2e:
          context:
            - GCP2
          mad-dog-type: test
          requires:
            - tests

      - test-sdk:
          context:
            - GCP2
          requires:
            - tests


  # in order to trigger this job
  # 1. go to the CircleCI dashboard
  # 2. go to the `master` branch
  # 3. click "Trigger Pipeline"
  # 4. Add string parameter "sdk_release_commit" and set to a valid git commit
  sdk-release:
    when: << pipeline.parameters.sdk_release_commit >>
    jobs:
      - publish-sdk:
          name: publish-sdk (<< pipeline.parameters.sdk_release_commit >>)
          sdk_release_commit: << pipeline.parameters.sdk_release_commit >>
          slack_mentions_user: << pipeline.parameters.slack_mentions_user >>
          context:
            - Audius Client
            - slack-secrets
          filters:
            branches:
              only: /(^master$)/

  # in order to trigger this job
  # 1. go to the CircleCI dashboard
  # 2. go to the `master` branch
  # 3. click "Trigger Pipeline"
  # 4. Add string parameter "deploy_args" to be passed to deploy-ci.py
  deploy-args:
    when: << pipeline.parameters.deploy_args >>
    jobs:
      - deploy:
          name: deploy (<< pipeline.parameters.deploy_args >>)
          deploy_args: << pipeline.parameters.deploy_args >>
          context:
            - slack-secrets
            - gh-tokens
            - open-vpn
          filters:
            branches:
              only: /(^master$)/

  # in order to trigger this job
  # 1. go to the CircleCI dashboard
  # 2. click "Trigger Pipeline"
  # 3. Add string parameter "slash_address" with any non-null value
  slash-proposal:
    when: << pipeline.parameters.slash_address >>
    jobs:
      - release-scripts:
          name: slash-proposal
          target: slash-proposal
          context:
            - slack-secrets
            - gh-tokens.releases

  # in order to trigger this job
  # 1. go to the CircleCI dashboard
  # 2. click "Trigger Pipeline"
  # 3. Add string parameter "cut_release" with any non-null value
  cut-release:
    when: << pipeline.parameters.cut_release >>
    jobs:
      - release-scripts:
          name: cut-release
          target: cut-release
          context:
            - slack-secrets
            - gh-tokens.releases
      - generate-release-checklist

  # in order to trigger this job
  # 1. go to the CircleCI dashboard
  # 2. click "Trigger Pipeline"
  # 3. Add string parameter "reservations" with any non-null value
  reservations:
    when: << pipeline.parameters.reservations >>
    jobs:
      - deploy:
          name: reservations
          reservations: true
          context:
            - slack-secrets
            - gh-tokens
            - open-vpn

  reservations-cron:
    jobs:
      - deploy:
          name: reservations
          reservations: true
          reservation_notification: true
          context:
            - slack-secrets
            - gh-tokens
            - open-vpn
    triggers:
      - schedule:
          cron: '0 15 * * 1,2,3,4,5'
          filters:
            branches:
              only: /(^master$)/

#   release-to-service-providers-cron:
#     jobs:
#       - release-week
#       - release-scripts:
#           name: release-to-service-providers
#           target: release-to-service-providers
#           context:
#             - slack-secrets
#             - gh-tokens.releases
#             - discord
#             - governance
#     triggers:
#       - schedule:
#           cron: '0 15 * * 1'
#           filters:
#             branches:
#               only: /(^master$)/

#   evaluate-proposal-cron:
#     jobs:
#       - release-week
#       - release-scripts:
#           name: evaluate-proposal
#           target: evaluate-proposal
#           context:
#             - slack-secrets
#             - governance
#     triggers:
#       - schedule:
#           cron: '0 19 * * 5'
#           filters:
#             branches:
#               only: /(^master$)/

#   cut-release-cron:
#     jobs:
#       - release-week
#       - release-scripts:
#           name: cut-release
#           target: cut-release
#           context:
#             - slack-secrets
#             - gh-tokens.releases
#       - generate-release-checklist
#     triggers:
#       - schedule:
#           cron: '0 7 * * 6'
#           filters:
#             branches:
#               only: /(^master$)/

  # in order to run a job in hold-workflows
  # 1. go to the CircleCI dashboard
  # 2. go to your branch of choice
  # 3. click "Trigger Pipeline"
  # 4. Add boolean parameter "full_ci" and set to true
  hold-workflows:
    when: << pipeline.parameters.full_ci >>
    jobs:
      - hold-test-mad-dog-e2e-full:
          type: approval
      - test-mad-dog-e2e:
          context:
            - GCP2
          name: test-mad-dog-e2e-full
          mad-dog-type: test-nightly
          requires:
            - hold-test-mad-dog-e2e-full
      - hold-build-logspout:
          type: approval
      - docker-build-and-push:
          name: build-logspout
          repo: logspout
          logspout-tag: 'true'
          requires:
            - hold-build-logspout
      - hold-bake-gcp-dev-image:
          type: approval
      - bake-gcp-dev-image:
          context:
            - GCP2
          name: bake-gcp-dev-image
          requires:
            - hold-bake-gcp-dev-image

  # test master at midnight daily
  test-nightly:
    jobs:
      - test-libs:
          name: test-libs-nightly
      - test-contracts:
          name: test-contracts-nightly
      - test-eth-contracts:
          name: test-eth-contracts-nightly
      - test-creator:
          name: test-creator-nightly
      - test-discovery:
          name: test-discovery-nightly
      - test-identity:
          name: test-identity-nightly
      - test-solana-programs:
          name: test-solana-programs-nightly
      - test-mad-dog-e2e:
          context:
            - GCP2
          name: test-mad-dog-e2e-nightly
          mad-dog-type: test-nightly
      - bake-gcp-dev-image:
          context:
            - GCP2
            - slack-secrets
          name: bake-gcp-dev-image-nightly
      - docker-build-and-push:
          name: build-eth-contracts
          repo: eth-contracts
      - docker-build-and-push:
          name: build-contracts
          repo: contracts
      - docker-build-and-push:
          name: build-solana-programs
          repo: solana-programs
    triggers:
      - schedule:
          cron: '0 5 * * *'
          filters:
            branches:
              only: /(^master$)/
