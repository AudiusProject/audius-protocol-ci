# Audius Protocol - CircleCI Config
# - Installs dependencies and executes unit tests for all sub directories
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
orbs:
  coveralls: coveralls/coveralls@1.0.6
commands:
  diff-if-necessary:
    parameters:
      service:
        type: string
    steps:
      - unless:
          condition:
            or:
              - equal: [master, << pipeline.git.branch >>]
              - matches:
                  pattern: '^release.*$'
                  value: << pipeline.git.branch >>
          steps:
            - run: ./diff.sh << parameters.service >> || (echo "no diff" && circleci-agent step halt)

# global parameters
parameters:
  full_ci:
    type: boolean
    default: false

jobs:
  bake-gcp-dev-image:
    docker:
      - image: audius/circleci-gcloud-bake:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    steps:
      # This has to be one large run block because CircleCI doesn't preserve state across run steps
      - run:
          name: Bake GCP Dev Image
          command: |
            # cleanup code setup before starting actual execution
            cleanup() {
              # Delete GCP box
              gcloud compute instances delete $GCLOUD_VM_NAME --quiet

              # Delete GCP firewall
              gcloud compute firewall-rules delete $GCLOUD_VM_NAME --quiet
            }
            trap cleanup EXIT

            # authenticate into gcloud
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account $GCLOUD_SERVICE_ACCOUNT_EMAIL --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            GCLOUD_VM_NAME=audius-bake-nightly-$(date +%s)
            BAKE_IMAGE_NAME=ci-image-bake-latest
            echo "$GCLOUD_VM_NAME" $GCLOUD_VM_NAME

            export PROTOCOL_DIR=/home/circleci/project
            git clone --branch "$CIRCLE_BRANCH" https://github.com/AudiusProject/audius-protocol.git "$PROTOCOL_DIR"
            pwd "$PROTOCOL_DIR"
            ls -la "$PROTOCOL_DIR"
            cd "$PROTOCOL_DIR/service-commands/"
            npm install --unsafe-perm

            # add IP to firewall
            CIRCLECI_IP=$(curl https://checkip.amazonaws.com)
            gcloud compute firewall-rules create $GCLOUD_VM_NAME --source-ranges "$CIRCLECI_IP" --action allow --rules all

            # run A setup on remote dev box to clone protocol and install the prerequisites for A
            # A setup ... || true is necessary because exit code returns 141 by default
            yes | $PROTOCOL_DIR/service-commands/scripts/A setup remote-dev $GCLOUD_VM_NAME || true

            # Run A up on remote box
            GCLOUD_IP_ADDRESS=$(gcloud compute instances describe $GCLOUD_VM_NAME --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
            ssh -o "StrictHostKeyChecking no" -i ~/.ssh/google_compute_engine -tt ubuntu@$GCLOUD_IP_ADDRESS \<< EOF
              # fail on error
              set -e;

              # on error, run this function
              exit_ssh() {
                echo $?
              }
              trap exit_ssh EXIT

              # commands to prime the VM for the bake
              A run init-repos up;
              A up;
              A run monitoring up;
              A down;
              exit;
            EOF

            # Stop GCP box, can't take an image from a running VM
            gcloud compute instances stop $GCLOUD_VM_NAME

            # Delete image with the same name (if exists)
            gcloud compute images delete $BAKE_IMAGE_NAME --quiet || true

            # Create the new CI bake image
            gcloud compute images create "$BAKE_IMAGE_NAME" \
              --project="$GOOGLE_PROJECT_ID" \
              --source-disk="$GCLOUD_VM_NAME" \
              --source-disk-zone="$GOOGLE_COMPUTE_ZONE" \
              --storage-location=us

  test-mad-dog-e2e:
    parameters:
      mad-dog-type:
        description: 'test, test-nightly'
        default: 'test'
        type: string
    docker:
      - image: audius/circleci-gcloud-bake:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
    steps:
      # This has to be one large run block because CircleCI doesn't preserve state across run steps
      - run:
          name: Test mad-dog on GCP
          command: |
            # cleanup code setup before starting actual execution
            cleanup() {
              # Delete GCP box
              gcloud compute instances delete $GCLOUD_VM_NAME --quiet

              # Delete GCP firewall
              gcloud compute firewall-rules delete $GCLOUD_VM_NAME --quiet
            }
            trap cleanup EXIT

            # authenticate into gcloud
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account $GCLOUD_SERVICE_ACCOUNT_EMAIL --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}

            GCLOUD_VM_NAME=mad-dog-test-$(date +%s)
            echo "GCLOUD_VM_NAME" $GCLOUD_VM_NAME

            export PROTOCOL_DIR=/home/circleci/project
            git clone --branch "$CIRCLE_BRANCH" https://github.com/AudiusProject/audius-protocol.git "$PROTOCOL_DIR"
            pwd "$PROTOCOL_DIR"
            ls -la "$PROTOCOL_DIR"
            cd "$PROTOCOL_DIR/service-commands/"
            npm install --unsafe-perm

            # add IP to firewall
            CIRCLECI_IP=$(curl https://checkip.amazonaws.com)
            gcloud compute firewall-rules create $GCLOUD_VM_NAME --source-ranges "$CIRCLECI_IP" --action allow --rules all

            # run A setup on remote dev box to clone protocol and install the prerequisites for A
            # A setup ... || true is necessary because exit code returns 141 by default
            yes | $PROTOCOL_DIR/service-commands/scripts/A setup remote-dev $GCLOUD_VM_NAME --fast --spot-instance || true

            # Run A up on remote box
            GCLOUD_IP_ADDRESS=$(gcloud compute instances describe $GCLOUD_VM_NAME --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
            ssh -o "StrictHostKeyChecking no" -i ~/.ssh/google_compute_engine -tt ubuntu@$GCLOUD_IP_ADDRESS \<< EOF
              cd /home/ubuntu/audius-protocol;
              git pull;
              git checkout $CIRCLE_BRANCH;
              cd ./service-commands;
              npm i
              cd ../mad-dog;
              A run init-repos up;
              A up;
              npm run start << parameters.mad-dog-type >> verbose;
              exit;
            EOF

  test-libs:
    docker:
      # specify the version you desire here
      - image: circleci/node:14.17.5
      - image: trufflesuite/ganache-cli:latest
        # https://discuss.circleci.com/t/docker-using-local-image/11581/9
        # https://circleci.com/docs/2.0/configuration-reference/#docker
        command: ['-l', '8000000', '-a', '50']
      - image: trufflesuite/ganache-cli:latest
        # https://discuss.circleci.com/t/docker-using-local-image/11581/9
        # https://circleci.com/docs/2.0/configuration-reference/#docker
        command: ['-l', '8000000', '-p', '8546', '-a', '50']

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4
    steps:
      - checkout
      - diff-if-necessary:
          service: libs
      - setup_remote_docker

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "libs/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: rm -rf /home/circleci/project/libs/node_modules/websocket/.git
      - run: |
          cd libs
          npm install
      - save_cache:
          paths:
            - libs/node_modules
          key: v1-dependencies-{{ checksum "libs/package.json" }}

      - restore_cache:
          keys:
            - data-contracts-{{ checksum "contracts/package.json" }}
            - data-contracts-
      - run:
          name: contract repo init
          command: |
            cd contracts/
            npm install
      - save_cache:
          paths:
            - contracts/node_modules
          key: data-contracts-{{ checksum "contracts/package.json" }}

      - restore_cache:
          keys:
            - eth-contracts-{{ checksum "eth-contracts/package.json" }}
            - eth-contracts-
      - run:
          name: eth-contracts repo init
          command: |
            cd eth-contracts/
            rm -rf node_modules/web3-providers-ws/node_modules/websocket/.git/
            npm install
      - save_cache:
          paths:
            - eth-contracts/node_modules
          key: eth-contracts-{{ checksum "eth-contracts/package.json" }}

      # run tests!
      - run:
          name: run tests
          command: |
            cd libs
            npm run test-circle-ci

  test-contracts:
    docker:
      - image: circleci/node:16
      - image: trufflesuite/ganache-cli:latest
        command: ['--port=8555', '-a', '100', '-l', '8000000']
    steps:
      - checkout
      - diff-if-necessary:
          service: contracts
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "contracts/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: installation
          command: |
            cd contracts
            npm install
            cd ../
      - save_cache:
          paths:
            - contracts/node_modules
          key: v1-dependencies-{{ checksum "contracts/package.json" }}

      # run tests!
      - run:
          name: run_tests
          command: |
            cd contracts
            npm run test-circle-ci
            cd ../

  test-eth-contracts:
    # https://circleci.com/docs/2.0/parallelism-faster-jobs/
    # 1 is default; leaving this here for quick modification
    parallelism: 1
    # https://circleci.com/docs/2.0/configuration-reference/#resourceclass
    # uses medium (2vcpu/4gb) by default
    resource_class: medium
    docker:
      - image: circleci/node:16
      - image: trufflesuite/ganache-cli:latest
        command: ['--port=8546', '-a', '50', '-l', '8000000']
    steps:
      - checkout
      - diff-if-necessary:
          service: eth-contracts
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "eth-contracts/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: installation
          command: |
            cd eth-contracts
            npm install
            cd ../
      - save_cache:
          paths:
            - eth-contracts/node_modules
          key: v1-dependencies-{{ checksum "eth-contracts/package.json" }}
      - run:
          name: run_lint
          command: |
            cd eth-contracts
            npm run lint-circle-ci
            cd ../
      - run:
          name: run_tests
          command: |
            cd eth-contracts
            npm run test-circle-ci-no-coverage
            cd ../
      # this is commented out since coverage is now disabled in CI
      # - coveralls/upload:
      #     path_to_lcov: ./eth-contracts/coverage/lcov.info

  test-creator-node:
    docker:
      # specify the version you desire here
      - image: circleci/node:14.16
      - image: circleci/postgres:11.1
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: audius_creator_node_test
      - image: redis:5.0.4
    steps:
      - checkout
      - diff-if-necessary:
          service: creator-node
      # Download and cache dependencies
      # - restore_cache:
      #     keys:
      #     - v1-dependencies-{{ checksum "creator-node/package.json" }}
      #     # fallback to using the latest cache if no exact match is found
      #     - v1-dependencies-
      - run:
          name: setup
          command: |
            cd creator-node
            npm install
      # - save_cache:
      #     paths:
      #       - creator-node/node_modules
      #     key: v1-dependencies-{{ checksum "creator-node/package.json" }}
      - run:
          name: run creator node tests
          command: |
            export POSTGRES_TEST_PORT=5432
            cd creator-node
            export redisPort=6379
            export spOwnerWallet='yes'
            export isCIBuild=true
            npm run test:coverage:ci
      - coveralls/upload:
          path_to_lcov: ./creator-node/coverage/lcov.info

  test-discovery-provider:
    docker:
      - image: cimg/python:3.9-node
      # Discovery provider dependencies
      - image: circleci/postgres:11.1
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: audius_discovery
      - image: docker.elastic.co/elasticsearch/elasticsearch:8.1.0
        environment:
          - network.host=0.0.0.0
          - discovery.type=single-node
          - cluster.name=docker-cluster
          - node.name=cluster1-node1
          - xpack.security.enabled=false
          - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
      - image: ipfs/go-ipfs:release
        # Bring up ganache
      - image: redis:3.0-alpine
      - image: trufflesuite/ganache-cli:latest
        command: ['--port=8555', '-a', '100', '-l', '8000000']
      - image: trufflesuite/ganache-cli:latest
        command: ['--port=8556', '-a', '100', '-l', '8000000']
    steps:
      - checkout
      - diff-if-necessary:
          service: discovery-provider
      - restore_cache:
          keys:
            - disc-prov-1-{{ checksum "discovery-provider/requirements.txt" }}
            - disc-prov-1-
      - run:
          name: python-setup
          command: |
            cd discovery-provider
            python3 -m pip install --user virtualenv
            rm -rf env/
            python3 -m venv env
            source env/bin/activate
            pip3 install -r requirements.txt
      - save_cache:
          paths:
            - discovery-provider/env/
          key: disc-prov-1-{{ checksum "discovery-provider/requirements.txt" }}
      - run:
          name: python-lint
          command: |
            export PROTOCOL_DIR=/home/circleci/project
            cd discovery-provider
            source env/bin/activate
            sh scripts/lint.sh
      - restore_cache:
          keys:
            - disc-prov-contracts-{{ checksum "contracts/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - disc-prov-contracts-
      - run:
          name: es-indexer init
          command: |
            cd discovery-provider/es-indexer
            npm install
      - run:
          name: contract repo init
          command: |
            cd contracts
            npm install
      - save_cache:
          paths:
            - contracts/node_modules
          key: disc-prov-contracts-{{ checksum "contracts/package.json" }}
      - run:
          name: eth-contract repo init
          command: |
            cd eth-contracts
            npm install
      - save_cache:
          paths:
            - eth-contracts/node_modules
          key: disc-prov-contracts-{{ checksum "contracts/package.json" }}
      - run:
          name: discovery provider tests
          command: |
            cd discovery-provider
            export audius_ipfs_port=5001
            export audius_redis_url=redis://localhost:6379/0
            export audius_elasticsearch_url=http://localhost:9200
            export audius_delegate_owner_wallet=0x1D9c77BcfBfa66D37390BF2335f0140979a6122B
            export audius_delegate_private_key=0x3873ed01bfb13621f9301487cc61326580614a5b99f3c33cf39c6f9da3a19cad
            export audius_web3_port=8555
            export audius_web3_eth_provider_url=http://localhost:8556
            export PROMETHEUS_MULTIPROC_DIR=/home/circleci/prometheus_data
            mkdir ${PROMETHEUS_MULTIPROC_DIR}
            ./scripts/circle-ci.sh

  test-identity-service:
    docker:
      # specify the version you desire here
      - image: circleci/node:14.17.5
      - image: ipfs/go-ipfs:release
      - image: trufflesuite/ganache-cli:latest
        # https://discuss.circleci.com/t/docker-using-local-image/11581/9
        # https://circleci.com/docs/2.0/configuration-reference/#docker
        command: ['-l', '8000000']
      - image: circleci/postgres:11.1
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: audius_identity_service_test
      - image: redis:5.0.4
    steps:
      - checkout
      - diff-if-necessary:
          service: identity-service
      - setup_remote_docker
      # restores data-contracts
      - restore_cache:
          keys:
            - data-contracts-{{ checksum "contracts/package.json" }}
            - data-contracts-
      - run:
          name: contract repo init
          command: |
            cd contracts/
            npm install
      # Download and cache dependencies
      - restore_cache:
          keys:
            - identity-service-dep1-{{ checksum "identity-service/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - identity-service-dep1-
      - run:
          name: setup identity
          command: |
            cd identity-service/
            rm -rf ./node_modules/websocket/.git
            npm install --verbose
      - save_cache:
          paths:
            - identity-service/node_modules
          key: identity-service-dep1-{{ checksum "identity-service/package.json" }}
      - run:
          name: run identity service tests
          command: |
            cd identity-service/
            export POSTGRES_TEST_PORT=5432
            export redisPort=6379
            export isCIBuild=true
            npm run test

  test-solana-programs:
    docker:
      # specify the version you desire here
      - image: cimg/rust:1.57.0-node
    steps:
      - checkout
      - diff-if-necessary:
          service: solana-programs

      - run:
          name: Setup solana
          command: |
            sh -c "$(curl -sSfL https://release.solana.com/v1.9.14/install)"
            export PATH="/home/circleci/.local/share/solana/install/active_release/bin:$PATH"

      - restore_cache:
          keys:
            - audius-eth-registry-deps-2-{{ checksum "solana-programs/audius_eth_registry/Cargo.toml" }}
            - audius-eth-registry-deps-2-
      - run:
          name: run audius eth registry tests
          command: |
            export PATH="/home/circleci/.local/share/solana/install/active_release/bin:$PATH"
            cd solana-programs/audius_eth_registry
            cargo build-bpf
            cargo test-bpf
      - save_cache:
          paths:
            - solana-programs/audius_eth_registry/target
          key: audius-eth-registry-deps-2-{{ checksum "solana-programs/audius_eth_registry/Cargo.toml" }}

      - restore_cache:
          keys:
            - claimable-token-deps-{{ checksum "solana-programs/claimable-tokens/program/Cargo.toml" }}
            - claimable-token-deps-
      - run:
          name: run claimable token tests
          command: |
            export PATH="/home/circleci/.local/share/solana/install/active_release/bin:$PATH"
            cd solana-programs/claimable-tokens/program
            cargo build-bpf
            cargo test-bpf
      - save_cache:
          paths:
            - solana-programs/claimable-tokens/program/target
          key: claimable-token-deps-{{ checksum "solana-programs/claimable-tokens/program/Cargo.toml" }}
      # - restore_cache:
      #     keys:
      #       - reward-manager-deps-{{ checksum "solana-programs/reward-manager/program/Cargo.toml" }}
      #       - reward-manager-deps-
      # - run:
      #     name: run reward manager tests
      #     command: |
      #       export PATH=$PWD/solana-release/bin:$PATH
      #       cd solana-programs/reward-manager/program
      #       cp ../../claimable-tokens/program/target/deploy/claimable_tokens.so .
      #       cargo build-bpf
      #       cargo test-bpf
      # - save_cache:
      #     paths:
      #       - solana-programs/reward-manager/program/target
      #     key: reward-manager-deps-{{ checksum "solana-programs/reward-manager/program/Cargo.toml" }}
      # - restore_cache:
      #     keys:
      #       - track-listen-count-deps-{{ checksum "solana-programs/track_listen_count/Cargo.toml" }}
      #       - track-listen-count-deps-
      # - run:
      #     name: run track listen count tests
      #     command: |
      #       export PATH=$PWD/solana-release/bin:$PATH
      #       cd solana-programs/track_listen_count
      #       cargo build-bpf
      #       cargo test-bpf
      # - save_cache:
      #     paths:
      #       - solana-programs/track_listen_count/target
      #     key: track-listen-count-deps-{{ checksum "solana-programs/track_listen_count/Cargo.toml" }}

  test-solana-programs-anchor:
    resource_class: large # 4vcpu/8gb
    machine:
      image: ubuntu-2004:202107-02 # Ubuntu 20.04, Docker v20.10.7, Docker Compose v1.29.2 - see https://circleci.com/docs/2.0/configuration-reference/#machine
      docker_layer_caching: true
    steps:
      # TODO implement cache for faster build
      - checkout
      - diff-if-necessary:
          service: solana-programs
      - run:
          name: Install node
          command: |
            export PROTOCOL_DIR="/home/circleci/project"
            export NVM_VERSION="v0.35.3"
            export NODE_VERSION="v14.18.1"
            sudo apt update -y && sudo apt upgrade -y && sudo apt install curl -y
            curl -o- "https://raw.githubusercontent.com/nvm-sh/nvm/$NVM_VERSION/install.sh" | bash
            source ~/.bashrc
            nvm install "$NODE_VERSION"
      - restore_cache:
          keys:
            - anchor-node-deps-{{ checksum "solana-programs/anchor/audius-data/yarn.lock" }}
            - anchor-node-deps-
      - run:
          name: Setup dev dependencies
          command: |
            export NODE_VERSION="v14.18.1"
            source ~/.profile
            source ~/.bashrc
            nvm use "$NODE_VERSION"
            export CARGO_HOME="cargo"
            export PROTOCOL_DIR="/home/circleci/project"
            cd "$PROTOCOL_DIR/solana-programs/anchor/audius-data"
            source /opt/circleci/.nvm/nvm.sh
            npm run install-dev
      - run:
          name: anchor tests
          command: |
            export PROTOCOL_DIR="/home/circleci/project"
            export PATH="/home/circleci/.local/share/solana/install/active_release/bin:/usr/local/lbin:$PATH"
            cd "$PROTOCOL_DIR/solana-programs/anchor/audius-data"
            npm test
      - save_cache:
          paths:
            - solana-programs/anchor/audius-data/node_modules
          key: anchor-node-deps-{{ checksum "solana-programs/anchor/audius-data/yarn.lock" }}
      - run:
          name: anchor program seed CLI tests
          command: |
            export NODE_VERSION="v14.18.1"
            source ~/.profile
            source ~/.bashrc
            nvm use "$NODE_VERSION"
            export PROTOCOL_DIR="/home/circleci/project"
            cd "$PROTOCOL_DIR/solana-programs/anchor/audius-data"
            solana-keygen new --no-bip39-passphrase --force -o "/home/circleci/.config/solana/id.json"
            yarn
            source /opt/circleci/.nvm/nvm.sh
            npm run localnet-up-ci
            npm run dev-setup

  docker-build-and-push:
    docker:
      - image: circleci/buildpack-deps:stretch
    parameters:
      repo:
        type: string
      logspout-tag:
        type: string
        default: ""
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Get tag or latest
          command: |
            # order of precendence for IMAGE tag is:
            # 1. $(head -n1 logging/logspout/Dockerfile) if << parameters.logspout-tag >> defined,
            # 2. CIRCLE_TAG if defined,
            # 3. Branch name if 'hotfix' in branch name (branch name passed in via $CIRCLE_BRANCH)
            # 4. 'latest', which is the default
            echo "export IMAGE_TAG=`[ << parameters.logspout-tag >> ] && echo $(head -n1 logspout/Dockerfile | cut -f 2 -d ':') || [ $CIRCLE_TAG ] && echo $(echo $CIRCLE_TAG | cut -d@ -f3) || [[ "$CIRCLE_BRANCH" =~ (hotfix) ]] && echo $CIRCLE_BRANCH || echo "latest" `" | tee -a $BASH_ENV
      - run:
          name: Docker login
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Docker build << parameters.repo >>
          command: |
            cd << parameters.repo >>
            audius_loggly_token_b64=$(echo ${audius_loggly_token} | base64)
            docker build -t audius/<< parameters.repo >>:$IMAGE_TAG -t audius/<< parameters.repo>>:$(git rev-parse HEAD) --build-arg git_sha=$(git rev-parse HEAD) --build-arg audius_loggly_disable=$audius_loggly_disable --build-arg audius_loggly_token=$audius_loggly_token --build-arg audius_loggly_tags=$audius_loggly_tags --build-arg BUILD_NUM=$CIRCLE_BUILD_NUM --build-arg audius_loggly_token=$audius_loggly_token_b64 .
            docker image prune --filter label=prune=true --filter label=build=$CIRCLE_BUILD_NUM --force
      - run:
          name: Docker push << parameters.repo >>
          command: |
            docker push audius/<< parameters.repo >>:$IMAGE_TAG
            docker push audius/<< parameters.repo >>:$(git rev-parse HEAD)

  docker-build-and-push-updated:
    docker:
      - image: cimg/base:2022.03
    parameters:
      repo:
        type: string
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: 20.10.11
      - run:
          name: Get tag or latest
          command: |
            # order of precendence for IMAGE tag is:
            # 1. CIRCLE_TAG if defined,
            # 2. Branch name if 'hotfix' in branch name (branch name passed in via $CIRCLE_BRANCH)
            # 3. 'latest', which is the default
            echo "export IMAGE_TAG=`[ $CIRCLE_TAG ] && echo $(echo $CIRCLE_TAG | cut -d@ -f3) || [[ "$CIRCLE_BRANCH" =~ (hotfix) ]] && echo $CIRCLE_BRANCH || echo "latest" `" | tee -a $BASH_ENV
      - run:
          name: Docker login
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Docker build << parameters.repo >>
          command: |
            cd << parameters.repo >>
            docker build -t audius/<< parameters.repo >>:$IMAGE_TAG -t audius/<< parameters.repo>>:$(git rev-parse HEAD) --build-arg git_sha=$(git rev-parse HEAD) --build-arg audius_loggly_disable=$audius_loggly_disable --build-arg audius_loggly_token=$audius_loggly_token --build-arg audius_loggly_tags=$audius_loggly_tags .
      - run:
          name: Docker push << parameters.repo >>
          command: |
            docker push audius/<< parameters.repo >>:$IMAGE_TAG
            docker push audius/<< parameters.repo >>:$(git rev-parse HEAD)

workflows:
  # test, build and push all commits
  test-build-and-push:
    jobs:
      - test-libs:
          name: test-libs
      - docker-build-and-push:
          name: build-libs
          repo: libs

      - test-contracts:
          name: test-contracts

      - test-eth-contracts:
          name: test-eth-contracts

      - test-creator-node:
          name: test-creator-node
      - docker-build-and-push:
          name: build-creator-node
          repo: creator-node

      - test-discovery-provider:
          name: test-discovery-provider
      - docker-build-and-push-updated:
          name: build-discovery-provider
          repo: discovery-provider

      - test-identity-service:
          name: test-identity-service
      - docker-build-and-push:
          name: build-identity-service
          repo: identity-service

      - test-solana-programs:
          name: test-solana-programs
      - test-solana-programs-anchor:
          name: test-solana-programs-anchor

      - test-mad-dog-e2e:
          context:
            - GCP2
          mad-dog-type: test

  # in order to run a job in hold-workflows
  # 1. go to the CircleCI dashboard
  # 2. go to your branch of choice
  # 3. click "Trigger Pipeline"
  # 4. Add boolean paramter "full_ci" and set to true
  hold-workflows:
    when: << pipeline.parameters.full_ci >>
    jobs:
      - hold-test-mad-dog-e2e-full:
          type: approval
      - test-mad-dog-e2e:
          context:
            - GCP2
          name: test-mad-dog-e2e-full
          mad-dog-type: test-nightly
          requires:
            - hold-test-mad-dog-e2e-full
      - hold-build-logspout:
          type: approval
      - docker-build-and-push:
          name: build-logspout
          repo: logspout
          logspout-tag: "true"
          requires:
            - hold-build-logspout
      - hold-bake-gcp-dev-image:
          type: approval
          filters:
            branches:
              only: /(^master$)/
      - bake-gcp-dev-image:
          context:
            - GCP2
          name: bake-gcp-dev-image
          requires:
            - hold-bake-gcp-dev-image
          filters:
            branches:
              only: /(^master$)/

  # test master at midnight daily
  test-nightly:
    jobs:
      - test-libs:
          name: test-libs-nightly
      - test-contracts:
          name: test-contracts-nightly
      - test-eth-contracts:
          name: test-eth-contracts-nightly
      - test-creator-node:
          name: test-creator-node-nightly
      - test-discovery-provider:
          name: test-discovery-provider-nightly
      - test-identity-service:
          name: test-identity-service-nightly
      - test-solana-programs:
          name: test-solana-programs-nightly
      - test-mad-dog-e2e:
          context:
            - GCP2
          name: test-mad-dog-e2e-nightly
          mad-dog-type: test-nightly
      - bake-gcp-dev-image:
          context:
            - GCP2
          name: bake-gcp-dev-image-nightly
      - docker-build-and-push:
          name: build-eth-contracts
          repo: eth-contracts
      - docker-build-and-push:
          name: build-contracts
          repo: contracts
      - docker-build-and-push:
          name: build-solana-programs
          repo: solana-programs
    triggers:
      - schedule:
          cron: '0 5 * * *'
          filters:
            branches:
              only: /(^master$)/
