# This config rate limits and redirect requests that exceed the rate limit to other discovery providers.

# The requests are rate limited by only allowing config.rate_limit requests every second to the discovery node; requests are redirected to other discovery nodes following this.

# To avoid infinite redirection, we set redirect_nonce, redirect_sig, and redirect_from when redirecting; the discovery provider receiving the redirect verifies this signature. We have a nonce to avoid an attacker from being able to get a valid redirect_sig since that could be used to focus a DDoS attack on a single node.

worker_processes 1;

error_log logs/error.log;

env audius_openresty_accept_redirect_from;
env audius_openresty_public_url;
env audius_openresty_rate_limit;
env audius_openresty_redirect_targets;
env audius_openresty_rsa_private_key;
env audius_openresty_rsa_public_key;

events {
    worker_connections 1024;
}

http {
    # set dns nginx should use for resolving external domains
    resolver 1.1.1.1;

    lua_package_path "/usr/local/openresty/conf/?.lua;;";

    lua_shared_dict limit_count_store 10m;
    lua_shared_dict rsa_public_key_store 10m;
    lua_shared_dict nonce_store 10m;

    server {
        listen 5000;

        location = /openresty_pubkey {
            content_by_lua_block {
                local config = require "config"
                ngx.say(config.rsa_public_key)
            }
        }

        location ~* ^/.*_check/?$ {
            proxy_pass http://127.0.0.1:3000;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location = /version {
            proxy_pass http://127.0.0.1:3000;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /v1/metrics {
            proxy_pass http://127.0.0.1:3000;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location / {
            access_by_lua_block {
                local limit_count = require "resty.limit.count"

                local main = require "main"
                local config = require "config"

                if not config.rate_limiting_enabled then
                    return
                end

                if main.verify_signature(ngx.var.redirect_from, ngx.var.redirect_nonce, ngx.var.redirect_sig) then
                    return
                end

                -- limit_count.new(store, count, time_window in seconds)
                local lim, err = limit_count.new("limit_count_store", config.rate_limit, 1)
                if not lim then
                    ngx.log(ngx.ERR, "failed to instantiate a resty.limit.req object: ", err)
                    return ngx.exit(500)
                end

                -- set a dummy key since we are not rate limiting separately for each user
                -- lim:incoming(key, no_dry_run)
                local delay, err = lim:incoming("k", true)
                if not delay then
                    local rate_limit_hit = err == "rejected"
                    if rate_limit_hit then
                        -- Redirect request after setting redirect args
                        local args, err = ngx.req.get_uri_args()
                        args.redirect_from, args.redirect_nonce, args.redirect_sig = main.get_redirect_args()
                        ngx.req.set_uri_args(args)
                        local url = main.get_redirect_target() .. ngx.var.request_uri
                        return ngx.redirect(url)
                    end

                    ngx.log(ngx.ERR, "failed to limit req: ", err)
                    return ngx.exit(500)
                end
            }

            proxy_pass http://127.0.0.1:3000;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}
