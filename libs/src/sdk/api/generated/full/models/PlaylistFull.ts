// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Favorite,
    FavoriteFromJSON,
    FavoriteFromJSONTyped,
    FavoriteToJSON,
} from './Favorite';
import {
    PlaylistAddedTimestamp,
    PlaylistAddedTimestampFromJSON,
    PlaylistAddedTimestampFromJSONTyped,
    PlaylistAddedTimestampToJSON,
} from './PlaylistAddedTimestamp';
import {
    PlaylistArtwork,
    PlaylistArtworkFromJSON,
    PlaylistArtworkFromJSONTyped,
    PlaylistArtworkToJSON,
} from './PlaylistArtwork';
import {
    Repost,
    RepostFromJSON,
    RepostFromJSONTyped,
    RepostToJSON,
} from './Repost';
import {
    TrackFull,
    TrackFullFromJSON,
    TrackFullFromJSONTyped,
    TrackFullToJSON,
} from './TrackFull';
import {
    UserFull,
    UserFullFromJSON,
    UserFullFromJSONTyped,
    UserFullToJSON,
} from './UserFull';

/**
 * 
 * @export
 * @interface PlaylistFull
 */
export interface PlaylistFull {
    /**
     * 
     * @type {PlaylistArtwork}
     * @memberof PlaylistFull
     */
    artwork?: PlaylistArtwork;
    /**
     * 
     * @type {string}
     * @memberof PlaylistFull
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof PlaylistFull
     */
    id: string;
    /**
     * 
     * @type {boolean}
     * @memberof PlaylistFull
     */
    is_album: boolean;
    /**
     * 
     * @type {string}
     * @memberof PlaylistFull
     */
    playlist_name: string;
    /**
     * 
     * @type {number}
     * @memberof PlaylistFull
     */
    repost_count: number;
    /**
     * 
     * @type {number}
     * @memberof PlaylistFull
     */
    favorite_count: number;
    /**
     * 
     * @type {number}
     * @memberof PlaylistFull
     */
    total_play_count: number;
    /**
     * 
     * @type {UserFull}
     * @memberof PlaylistFull
     */
    user: UserFull;
    /**
     * 
     * @type {number}
     * @memberof PlaylistFull
     */
    blocknumber: number;
    /**
     * 
     * @type {string}
     * @memberof PlaylistFull
     */
    created_at?: string;
    /**
     * 
     * @type {Array<Repost>}
     * @memberof PlaylistFull
     */
    followee_reposts: Array<Repost>;
    /**
     * 
     * @type {Array<Favorite>}
     * @memberof PlaylistFull
     */
    followee_favorites: Array<Favorite>;
    /**
     * 
     * @type {boolean}
     * @memberof PlaylistFull
     */
    has_current_user_reposted: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PlaylistFull
     */
    has_current_user_saved: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PlaylistFull
     */
    is_delete: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PlaylistFull
     */
    is_private: boolean;
    /**
     * 
     * @type {string}
     * @memberof PlaylistFull
     */
    updated_at?: string;
    /**
     * 
     * @type {Array<PlaylistAddedTimestamp>}
     * @memberof PlaylistFull
     */
    added_timestamps: Array<PlaylistAddedTimestamp>;
    /**
     * 
     * @type {string}
     * @memberof PlaylistFull
     */
    user_id: string;
    /**
     * 
     * @type {Array<TrackFull>}
     * @memberof PlaylistFull
     */
    tracks: Array<TrackFull>;
    /**
     * 
     * @type {string}
     * @memberof PlaylistFull
     */
    cover_art?: string;
    /**
     * 
     * @type {string}
     * @memberof PlaylistFull
     */
    cover_art_sizes?: string;
    /**
     * 
     * @type {number}
     * @memberof PlaylistFull
     */
    track_count: number;
}

export function PlaylistFullFromJSON(json: any): PlaylistFull {
    return PlaylistFullFromJSONTyped(json, false);
}

export function PlaylistFullFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlaylistFull {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'artwork': !exists(json, 'artwork') ? undefined : PlaylistArtworkFromJSON(json['artwork']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'id': json['id'],
        'is_album': json['is_album'],
        'playlist_name': json['playlist_name'],
        'repost_count': json['repost_count'],
        'favorite_count': json['favorite_count'],
        'total_play_count': json['total_play_count'],
        'user': UserFullFromJSON(json['user']),
        'blocknumber': json['blocknumber'],
        'created_at': !exists(json, 'created_at') ? undefined : json['created_at'],
        'followee_reposts': ((json['followee_reposts'] as Array<any>).map(RepostFromJSON)),
        'followee_favorites': ((json['followee_favorites'] as Array<any>).map(FavoriteFromJSON)),
        'has_current_user_reposted': json['has_current_user_reposted'],
        'has_current_user_saved': json['has_current_user_saved'],
        'is_delete': json['is_delete'],
        'is_private': json['is_private'],
        'updated_at': !exists(json, 'updated_at') ? undefined : json['updated_at'],
        'added_timestamps': ((json['added_timestamps'] as Array<any>).map(PlaylistAddedTimestampFromJSON)),
        'user_id': json['user_id'],
        'tracks': ((json['tracks'] as Array<any>).map(TrackFullFromJSON)),
        'cover_art': !exists(json, 'cover_art') ? undefined : json['cover_art'],
        'cover_art_sizes': !exists(json, 'cover_art_sizes') ? undefined : json['cover_art_sizes'],
        'track_count': json['track_count'],
    };
}

export function PlaylistFullToJSON(value?: PlaylistFull | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'artwork': PlaylistArtworkToJSON(value.artwork),
        'description': value.description,
        'id': value.id,
        'is_album': value.is_album,
        'playlist_name': value.playlist_name,
        'repost_count': value.repost_count,
        'favorite_count': value.favorite_count,
        'total_play_count': value.total_play_count,
        'user': UserFullToJSON(value.user),
        'blocknumber': value.blocknumber,
        'created_at': value.created_at,
        'followee_reposts': ((value.followee_reposts as Array<any>).map(RepostToJSON)),
        'followee_favorites': ((value.followee_favorites as Array<any>).map(FavoriteToJSON)),
        'has_current_user_reposted': value.has_current_user_reposted,
        'has_current_user_saved': value.has_current_user_saved,
        'is_delete': value.is_delete,
        'is_private': value.is_private,
        'updated_at': value.updated_at,
        'added_timestamps': ((value.added_timestamps as Array<any>).map(PlaylistAddedTimestampToJSON)),
        'user_id': value.user_id,
        'tracks': ((value.tracks as Array<any>).map(TrackFullToJSON)),
        'cover_art': value.cover_art,
        'cover_art_sizes': value.cover_art_sizes,
        'track_count': value.track_count,
    };
}

